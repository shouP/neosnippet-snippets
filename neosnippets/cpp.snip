include c.snip

# #include <...>
snippet inc
options     head
alias   #inc, #include
    #include <${1:iostream}>${0}
# #include "..."
snippet inc2
options     head
alias   #inc2, #include2
    #include "${1}"${0}

snippet     template
abbr        template <T>
    template<typename ${1:T}> ${0}

snippet     class
options     head
abbr        class {}
    class ${1:#:name} {
        ${2}
    public:
        $1(${3});
    };
    $1::$1($3) {
        ${0:TARGET}
    }

snippet     class-without-constructor
options     head
abbr        class {}
    class ${1:#:name} {
        ${2}
    };

snippet     try
options     head
abbr        try catch
    try {
        ${1:#:TARGET}
    } catch (${2:...}) {
        ${3}
    }

# range based for ( C++11 feature )
snippet     for_CPP11
options     head
abbr        for (:) {}
    for (${1:auto&& }${2:var} : ${3:container}) {
        ${0:TARGET}
    }

# lambda expression ( C++11 feature )
snippet     lambda
abbr        [](){}
    [${1}](${2})${3}{ ${4:TARGET} }${0:;}

# scoped enumeration ( C++11 feature )
snippet     enum_scoped
options     head
abbr        enum struct {};
    enum struct ${1:#:name} { ${2:#:TARGET} };

# static assert ( C++11 feature )
snippet     static_assert
abbr        static_assert(,"")
    static_assert( ${1}, "${2}" );${0}

delete      namespace
options     head
snippet     namespace
abbr        namespace {}
    namespace ${1:#:name} {
        ${0:TARGET}
    } // namespace $1

snippet     static_cast
abbr        static_cast<>()
    static_cast<${1}>(${2})${0}

snippet     reinterpret_cast
abbr        reinterpret_cast<>()
    reinterpret_cast<${1}>(${2})${0}

snippet     const_cast
abbr        const_cast<>()
    const_cast<${1}>(${2})${0}

snippet     dynamic_cast
abbr        dynamic_cast<>()
    dynamic_cast<${1}>(${2})${0}

snippet     helloworld
abbr        #include<iostream> int main...
    #include <iostream>

    int main(int argc, char const* argv[])
    {
        std::cout << "hello, world!" << std::endl;
        return 0;
    }

snippet     commentLineCpp-
alias       line1
options     head
abbr        //---...---
    //------------------------------------------------------------------------------
    // ${1}
    //------------------------------------------------------------------------------
    ${0}

snippet     commentLineCpp=
alias       line2
options     head
abbr        //===...===
    //==============================================================================
    // ${1}
    //==============================================================================
    ${0}

# google test functions.
snippet     gtestfixture
options     head
alias       fixture
abbr        class FixtureName : public ::testing::Test {...}
    class ${1:FixtureName} : public ::testing::Test {
    protected:
        virtual void SetUp() {
            // このコードは，コンストラクタの直後（各テストの直前）
            // に呼び出されます．
            ${0}
        };
    
        virtual void TearDown() {
            // このコードは，各テストの直後（デストラクタの直前）
            // に呼び出されます．
            ${0}
        };
    
    public:
        ${0}
    };

snippet     gtestfunction
options     head
alias       test
abbr        TEST( TestName, TestCase ) { ... }
    TEST(${1:TestName}, ${2:TestCase})
    {
        ${0}
    }

snippet     gtestfixturefunction
options     head
alias       test_f
abbr        TEST_F( FixtureName, TestCase ) { ... }
    TEST_F(${1:TestName}, ${2:TestCase})
    {
        ${0}
    }

#assertion 
snippet     assert_eq
options     head
abbr        ASSERT_EQ( expected == actual );
    ASSERT_EQ(${1:expected}, ${2:actual});
snippet     assert_ne
options     head
abbr        ASSERT_NE( val1 != val2 );
    ASSERT_NE(${1:val1}, ${2:val2});
snippet     assert_lt
options     head
abbr        ASSERT_LT( val1 < val2 );
    ASSERT_LT(${1:val1}, ${2:val2});
snippet     assert_le
options     head
abbr        ASSERT_LE( val1 <= val2 );
    ASSERT_LE(${1:val1}, ${2:val2});
snippet     assert_gt
options     head
abbr        ASSERT_GT( val1 > val2 );
    ASSERT_GT(${1:val1}, ${2:val2});
snippet     assert_ge
options     head
abbr        ASSERT_GE( val1 >= val2 );
    ASSERT_GE(${1:val1}, ${2:val2});
snippet     assert_true
options     head
abbr        ASSERT_TRUE( condition );
    ASSERT_TRUE(${1:condition});
snippet     assert_false
options     head
abbr        ASSERT_FALSE( condition );
    ASSERT_FALSE(${1:condition});

#expection
snippet     expect_eq
options     head
abbr        EXPECT_EQ( expected, actual );
    EXPECT_EQ(${1:expected}, ${2:actual});
snippet     expect_ne
options     head
abbr        EXPECT_NE( val1, val2 );
    EXPECT_NE(${1:val1}, ${2:val2});
snippet     expect_lt
options     head
abbr        EXPECT_LT( val1 < val2 );
    EXPECT_LT(${1:val1}, ${2:val2});
snippet     expect_le
options     head
abbr        EXPECT_LE( val1 <= val2 );
    EXPECT_LE(${1:val1}, ${2:val2});
snippet     expect_gt
options     head
abbr        EXPECT_GT( val1 > val2 );
    EXPECT_GT(${1:val1}, ${2:val2});
snippet     expect_ge
options     head
abbr        EXPECT_GE( val1 >= val2 );
    EXPECT_GE(${1:val1}, ${2:val2});
snippet     expect_true
options     head
abbr        EXPECT_TRUE( condition );
    EXPECT_TRUE(${1:condition});
snippet     expect_false
options     head
abbr        EXPECT_FALSE( condition );
    EXPECT_FALSE(${1:condition});
